//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace INVPLService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="INVPLService.INVPLSoap")]
    public interface INVPLSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITACT112A", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ITACT112AAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INVPLREPROCESS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> INVPLREPROCESSAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NotionalSummary", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> NotionalSummaryAsync(string ClientCode, string strDate, string Ignore112A);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NotionalDetail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> NotionalDetailAsync(string ClientCode, string strDate, string ScripCode, string Ignore112A);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualPLSummary", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ActualPLSummaryAsync(string ClientCode, string FromDt, string ToDt, string Type, string Ignore112A);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualPLDetail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ActualPLDetailAsync(string ClientCode, string FromDt, string ToDt, string Type, string ScripCode, string Ignore112A);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Dividend", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DividendAsync(string ClientCode, string FromDt, string ToDt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TradeListingSummary", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TradeListingSummaryAsync(string ClientCode, string FromDt, string ToDt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TradeListingDetail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TradeListingDetailAsync(string ClientCode, string FromDt, string ToDt, string ScripCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TradeInsert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TradeInsertAsync(string ClientCode, string ScripCode, string strDataXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TradeUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TradeUpdateAsync(string ClientCode, string ScripCode, string strDataXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TradeDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TradeDeleteAsync(string ClientCode, string SrNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SpecialCharges", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SpecialChargesAsync(string ClientCode, string FromDt, string ToDt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SLBMSummary", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SLBMSummaryAsync(string ClientCode, string FromDt, string ToDt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SLBMDetail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SLBMDetailAsync(string ClientCode, string FromDt, string ToDt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TradeListingReport", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TradeListingReportAsync(string ClientCode, string ScripCode, string FromDt, string ToDt, string CorporateAction);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface INVPLSoapChannel : INVPLService.INVPLSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class NVPLSoapClient : System.ServiceModel.ClientBase<INVPLService.INVPLSoap>, INVPLService.INVPLSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public NVPLSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(NVPLSoapClient.GetBindingForEndpoint(endpointConfiguration), NVPLSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NVPLSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(NVPLSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NVPLSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(NVPLSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NVPLSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> ITACT112AAsync()
        {
            return base.Channel.ITACT112AAsync();
        }
        
        public System.Threading.Tasks.Task<string> INVPLREPROCESSAsync()
        {
            return base.Channel.INVPLREPROCESSAsync();
        }
        
        public System.Threading.Tasks.Task<string> NotionalSummaryAsync(string ClientCode, string strDate, string Ignore112A)
        {
            return base.Channel.NotionalSummaryAsync(ClientCode, strDate, Ignore112A);
        }
        
        public System.Threading.Tasks.Task<string> NotionalDetailAsync(string ClientCode, string strDate, string ScripCode, string Ignore112A)
        {
            return base.Channel.NotionalDetailAsync(ClientCode, strDate, ScripCode, Ignore112A);
        }
        
        public System.Threading.Tasks.Task<string> ActualPLSummaryAsync(string ClientCode, string FromDt, string ToDt, string Type, string Ignore112A)
        {
            return base.Channel.ActualPLSummaryAsync(ClientCode, FromDt, ToDt, Type, Ignore112A);
        }
        
        public System.Threading.Tasks.Task<string> ActualPLDetailAsync(string ClientCode, string FromDt, string ToDt, string Type, string ScripCode, string Ignore112A)
        {
            return base.Channel.ActualPLDetailAsync(ClientCode, FromDt, ToDt, Type, ScripCode, Ignore112A);
        }
        
        public System.Threading.Tasks.Task<string> DividendAsync(string ClientCode, string FromDt, string ToDt)
        {
            return base.Channel.DividendAsync(ClientCode, FromDt, ToDt);
        }
        
        public System.Threading.Tasks.Task<string> TradeListingSummaryAsync(string ClientCode, string FromDt, string ToDt)
        {
            return base.Channel.TradeListingSummaryAsync(ClientCode, FromDt, ToDt);
        }
        
        public System.Threading.Tasks.Task<string> TradeListingDetailAsync(string ClientCode, string FromDt, string ToDt, string ScripCode)
        {
            return base.Channel.TradeListingDetailAsync(ClientCode, FromDt, ToDt, ScripCode);
        }
        
        public System.Threading.Tasks.Task<string> TradeInsertAsync(string ClientCode, string ScripCode, string strDataXml)
        {
            return base.Channel.TradeInsertAsync(ClientCode, ScripCode, strDataXml);
        }
        
        public System.Threading.Tasks.Task<string> TradeUpdateAsync(string ClientCode, string ScripCode, string strDataXml)
        {
            return base.Channel.TradeUpdateAsync(ClientCode, ScripCode, strDataXml);
        }
        
        public System.Threading.Tasks.Task<string> TradeDeleteAsync(string ClientCode, string SrNo)
        {
            return base.Channel.TradeDeleteAsync(ClientCode, SrNo);
        }
        
        public System.Threading.Tasks.Task<string> SpecialChargesAsync(string ClientCode, string FromDt, string ToDt)
        {
            return base.Channel.SpecialChargesAsync(ClientCode, FromDt, ToDt);
        }
        
        public System.Threading.Tasks.Task<string> SLBMSummaryAsync(string ClientCode, string FromDt, string ToDt)
        {
            return base.Channel.SLBMSummaryAsync(ClientCode, FromDt, ToDt);
        }
        
        public System.Threading.Tasks.Task<string> SLBMDetailAsync(string ClientCode, string FromDt, string ToDt)
        {
            return base.Channel.SLBMDetailAsync(ClientCode, FromDt, ToDt);
        }
        
        public System.Threading.Tasks.Task<string> TradeListingReportAsync(string ClientCode, string ScripCode, string FromDt, string ToDt, string CorporateAction)
        {
            return base.Channel.TradeListingReportAsync(ClientCode, ScripCode, FromDt, ToDt, CorporateAction);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.INVPLSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.INVPLSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.INVPLSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://20.204.151.106:5003//INVPL.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.INVPLSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://20.204.151.106:5003//INVPL.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            INVPLSoap,
            
            INVPLSoap12,
        }
    }
}
